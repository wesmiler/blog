/* common.min.js Chen 2016-01-02 */
var save_data = function(index,id){
    alert(index+id);
} 

var edit_data = function(index,id){
    alert(id);
} 

/**
 * sel_all description
 * @param  {[type]} obj [description]
 * @return {[type]}     [description]
 */
var sel_all = function(obj){
    var $this = $("."+obj);
    $this.each(function(){
        $(this).attr('checked','checked');
    });
}

var sel_invert = function(obj){
    var $this = $("."+obj);
    $this.each(function(){
        $(this).attr('checked','checked');
    });
}

var del_select = function(){
    var $this = $("."+obj);
    $this.each(function(){
        $(this).attr('checked','checked');
    });
}

var sort = function(status,obj,url){
    var $this = $(obj);
    var data = $("."+$this.attr('data')).val();
    var type = typeof($this.attr('data'))=='undefined'? $this.attr('data-type') : data;
    var $object = $this.attr('data-toggle');
    $.ajax({
        url: url,
        type: 'POST',
        dataType: 'json',
        data: 'status='+status+'&type='+type,
        success: function(data){
            alert(data.html);
        }
    });

}

var get_datetime = function(t){
  var d =new Date();
  var yy = d.getFullYear();
  var mm = (d.getMonth()+1)<10? '0'+(d.getMonth()+1) : (d.getMonth()+1);
  var dd = d.getDate()<10? '0'+d.getDate() : d.getDate();
  var hh = d.getHours()<10? '0'+d.getHours() : d.getHours();
  var ii = d.getMinutes()<10? '0'+d.getMinutes() : d.getMinutes();
  var ss = d.getSeconds()<10? '0'+d.getSeconds() : d.getSeconds();
  var date = yy+'-'+mm+'-'+dd;
  var time = hh+':'+ii+':'+ss;
  var t =  typeof(t) == 'undefined'? 0 : t;
  switch (t){
    case 0: 
            return date;
            break;
    case 1: 
            return time;
            break;
    case 2: 
            return date+' '+time;
            break;
  }
}


var get_date = function(s){
  var defaults = {}
  var o = $.extend(defaults, o);
  var res = s.replace(/-/g,'');
  res = res.replace(/ /g,'');
  res = res.replace(/:/g,'');
  res = res.replace(/\//g,'');
  return parseInt(res);
}

/**
 * get_random description
 * @param  {int} max max random number
 * @param  {int} len numbers
 * @return array
 */
var get_random = function(max,len){
  var len = len>0? len : 1;
  var max = max>0? max : 10;
  var x = parseInt(Math.random(0,max)*(max+1));
  var rand = new Array();
  rand[0] = x;
  for(var i = 1; i < len; i++){
    do{
      rand[i] = parseInt(Math.random(0,max)*(max+1));
    }while(rand[i]==rand[i-1]);
  }
  return rand;

}

$.fn.wrapper = function(o){
  var defaults = { sidebar: "#sidebar", h_height: 54, d_value: 89}
  var o = $.extend(defaults, o);
  var mh = $(this).outerHeight();
  var sh = $(o.sidebar).outerHeight();
  var mw = $(this).outerWidth();
  var sw = $(o.sidebar).outerWidth();
  var dh = $(document).innerHeight()-o.h_height-o.d_value;
  if (mh < dh){
      mh = dh;
      $(this).css('heiht', dh);
  }
  if ( mh+o.d_value > sh &&mw != sw){
      $(o.sidebar).css("height", mh+o.d_value);
  }

}

/**
 * custom popover
 * popover_tips description
 * @param  type o object
 * @return    
 */
$.fn.popover_tips = function(o){
    //参数说明：auto_hide(定时隐藏)、stopPropagation(失去焦点自动隐藏)、time(定时时间/ms，设置auto_hide时有效)
    var defaults = {auto_hide: false, stopPropagation: false, time: 3000}
    var o = $.extend(defaults, o);
    $(this).click(function(event){
    var _this = $(this);
    _this.popover();
    if (o.auto_hide){
        setTimeout(function(){
            _this.popover('hide');
        }, o.time);
    }
    if (o.stopPropagation){
        $(document).click(function(event){
            _this.popover('hide');
        });
    }
    event.stopPropagation();
    });
}

/**
 * The error warning popover
 * popover_warning description
 * @param  {obj} o the popover object
 * @return 
 */
$.fn.popover_warning = function(o){
    //参数说明： msg(提示信息)、color(字符颜色)、time(自动消失时间)
    var defaults = {msg: '格式错误！', color: 'red', defColor: '#333', options: 'destroy', time: 0}
    var o = $.extend(defaults, o);
    var _this = $(this);
    var msg = _this.attr('data-content');
    _this.attr('data-content','<span style="color:'+o.color+'">'+o.msg+'</span>');
    _this.popover('show');
    if(o.time>0){
        setTimeout(function(){
            _this.popover('hide');
            _this.attr('data-content', '<span style="color:'+o.defColor+'">'+msg+'</span>');
        }, o.time);
    }else{
      setTimeout(function(){
      //   $(this).popover('hide');
      _this.on('shown.bs.popover',function(){
        $(this).popover('destroy');
      });
      },2000);
    }
    
}

$.fn.set_label_style = function(o){
  var defaults = {color: null}
  var o = $.extend(defaults, o);
  var _this = $(this);
  var _col_ = new Array('label-info','label-notice','label-success','label-warning','label-primary'); 
  _col_ = o.color != null && o.color.length>0? o.color : _col_;
  var len = _col_.length;
  var _x_ = get_random(len-1,len);
  _this.each(function(k){ 
      for(var i=0; i<_col_.length; i++){
        if($(this).hasClass(_col_[i])){
          $(this).removeClass(_col_[i]);
        }
      }
      $(this).addClass(_col_[_x_[k]]);
    })
}

/**
 * create label
 * create_label description
 * @param type o object
 * @return type
 */
$.fn.create_label = function(o){
    //参数说明：delClass(删除标签按钮类名)、content(标签内容)
    var defaults = {delClass: 'label-del', content: '标签内容'}
    var o = $.extend(defaults, o);
    var i = $(this).children('.label').length-1;
    var color = $(this).children(".label:eq("+i+")").label_style({type: 1}); // get random style of the label
    $('<span class="label '+color+'"><span>'+o.content+'</span><a class="'+o.delClass+'">&times;</a></span>').appendTo($(this)); // create a label and append to the label warpper
}

/**
 * label_style description
 * @param  {obj} o object
 * @return {[type]}   [description]
 */
$.fn.label_style = function(o){
    //参数说明：colorArray(标签样式类数组)、label-list(父类标题元素的父类)、type(0设置标签样式、1获取随机标签样式类名)
    var defaults = {colorArray: 0, parents: 'label-list', type: 0}
    var o = $.extend(defaults, o);
    var _this = $(this);
    var cArray = new Array('label-info','label-success','label-warning','label-danger','label-primary'); 
    var cc = o.colorArray == 0 || o.colorArray.length == 0? cArray : o.colorArray; // color class array
    var index = o.type == 1? _this.index() : _this.index()-1;
    var prev = _this.index() !=0? index: 0;
    var x = 0; // create rand number
    do{
        x = parseInt(Math.random(1,10)*cc.length); // create rand number
    }while($(this).parents("."+o.parents+"").find(".label:eq("+prev+")").hasClass(cc[x])); // avoid of current label style like as the last label style
    if (!o.type){
        var len = cc.length;
        for (var i = 0; i < len; i++){
            if (_this.hasClass(cc[i])){
                _this.removeClass(cc[i]); // remove current label default style
            }
        }
        _this.addClass(cc[x]); // set new style for current label
    }else{
        return cc[x]; // return created label style 
    }
}

/**
 * check_label description
 * @param  {obj} o object
 * @return int
 */
$.fn.check_label = function(o){
  // 参数说明：objClass(操作标签类或ID对象)、count(判断数量值)、opType(操作类型，0隐藏、1显示...)
  var defaults = { objIndex: '.label-control .label-list', objClass: '.label-control', count: 5, opType: 0, index: 0}
  var o = $.extend(defaults, o);
  var labs = '';
  var res = new Array();
  var i = $(this).index(o.objIndex);
  var _this = $(""+o.objClass+":eq("+i+")");
  var count = _this.find(".label").length;
  if (count == o.count){ // if current label counts was the max
    switch(o.opType){ 
        case 0: 
                  _this.find(".label-text").popover('hide');
                  _this.find(".label-text").hide();
                  break;
        
        case 1: 
                  _this.find(".label-text").show();
                  break;
    }
  }else{
    switch(o.opType){
        case 1: 
                  _this.find(".label-text").popover('hide');
                  _this.find(".label-text").hide();
                  break;
        
        case 0: 
                  _this.find(".label-text").show();
                  break;
    }
  }
  _this.find(".label").set_labels(); // set the label value as the form data
  _this.find('.label-del').del_label();
  return count; // return current exists label counts
}

$.fn.del_label = function(o){
  var defaults = {objClass: '.label-control', toggle: '.label-list'}
  var o = $.extend(defaults, o);
  var _this = $(this);
  _this.on('click',function(){
    var _del = $(this);
    var i = _del.parents(""+o.toggle+"").attr("data-toggle");
    var _parent = $(""+o.objClass+":eq("+i+")");
    _del.parents('.label').detach(); // delete current label
    _parent.find(""+o.toggle+"").check_label(); // re check the label and reset the label data of form
    _parent.find(".label").each(function(){
      $(this).label_style();
    });
  });
}

/**
 * set labels value as form data
 * set_labels description
 * @param {obj} o object
 * @return string use the tag signal to connect all label while as form data 
 */
$.fn.set_labels = function(o){
  //参数说明： valObjClass(标签数据接收元素类或ID)、tag(标签值连接符)
  var defaults = {objClass: '.label-control', tag: ','}
  var o = $.extend(defaults, o);
  var labs = '';
  var _this = $(this); 
  _this.each(function(i){
            var tag = (_this.length-1== i)? '' : o.tag;
            labs += $.trim($(this).children("span").html())+tag;
  });
  _this.parents(""+o.objClass+"").find(".labels").val(labs); // set the label data
  return labs;
}

$.fn.input_label = function(o){
  var defaults = {objIndex: '.label-control .label-text', parentObj: '.label-control', toggle: '.label-list', labelObj: 'h4', keyCode: 13}
  var o = $.extend(defaults, o);
  $(this).keydown(function(event){
    if (event.keyCode == o.keyCode){ //if is space key auto create
      var i = $(this).index(""+o.objIndex+"");
      var $parent = $(""+o.parentObj+":eq("+i+")");
      var x = $parent.find(""+o.toggle+"").check_label();
      if (x != 5){
        var $this = $(this);
        var v = $.trim($(this).val());
        var p = /^[\u4e00-\ufa95A-Za-z]{2,6}$/;
        var dc = $this.attr('data-content');
        var name =  $this.attr('placeholder').replace(/请输入/,'');
        $this.attr('placeholder','请输入'+name);
        if (v==''){
          $this.val("");
          $(this).popover_warning({msg: name+'不能为空！', time: 1200});
        } else if (p.test(v)){
          var labs = $parent.children(""+o.toggle+"").find(".label").set_labels().split(',');
          var len = labs.length;
          for (var i = 0; i < len; i++) {
            if (labs[i] == v){
              $this.val("");
              $(this).popover_warning({msg: name+'已存在！', time: 1200});
              return false;
            }
          };
          $parent.find(""+o.labelObj+"").create_label({content: v});
          $parent.find(""+o.toggle+"").check_label();
          $this.val("");
        } else {
          $this.val("");
          $(this).popover_warning({msg: name+'格式不正确！', time: 1200});
        }
      }
    }
  });
}

/**
 *
 * compare start_datetime to end_datetime and do verify
 * verify_datetime description
 * @param  {obj} o object
 * @return 
 */
$.fn.verify_datetime = function(o){
  //参数说明：objIndex(datetime的索引类)、start_date(开始日期)、end_date(结束日期)
  var defaults = {objIndex: ".date-control .form-datetime", start_date: 'start_date', end_date: 'end_date'};
  var o = $.extend(defaults, o);
  var x = $(this).index(o.objIndex);
  var name = $(this).attr('name');
  var cd = $.trim($(this).val()) != ''? get_date($(this).val()) : 0; // current date value
  if(name == o.start_date){
    var _next = $(o.objIndex+":eq("+(x+1)+")");
    var nd = $.trim($(this).val()) != ''? get_date(_next.val()) : 0; // last date value
    if(cd >= nd){
      _next.val("");
    }
  }else if ( name == o.end_date){
    var _prev = $(o.objIndex+":eq("+(x-1)+")");
    var pd = $.trim($(this).val()) != ''? get_date(_prev.val()) : 0; // last date value
    if(cd <= pd){
      _prev.val("");
    }
  }
}

// $.fn.checkForm = function(o){
//     var defaults = {ajax: true, pattern: null, time: 3000};
//     var o = $.exted(defaults, o);
//     // var patterns = new Array();
//     // patterns['username'] = '';
//     // patterns['nickname'] = '';
//     // patterns['password'] = '';
//     // patterns['name'] = '';
//     // patterns['email'] = '';
//     // patterns['verify'] = '';
//     // patterns['date'] = '';
//     // patterns['url'] = '';
//     // patterns['ip'] = '';
//     // patterns['qq'] = '';
//     // patterns['post'] = '';
//     // patterns['phone'] = '';
//     // patterns['address'] = '';
//     var _this = $(this);
//     var _list = _this.find('.form-control');
//     _list.each(function(i){
//         var name = $(this).attr('name');
//         var value = $.trim($(this).val());
//         var pattern = typeof($(this).attr('verify-type'))?eval(patterns[$(this).attr('verify-type')]) : null;
//         var tips = typeof($(this).attr('data-content'))? $(this).attr('data-content') : '格式错误！';
//         var empty = typeof($(this).attr('empty'))? $(this).attr('empty') : false;
//         var errorMsg = $(this).attr('error-msg');
//         var _parents = $(this).parents('form-group');
//         var names = _parents.find("control-label");
//         // var emptyMsg = $(this).attr('empty-msg');
//         if( value == '' && empty == false){
//             $(this).popover_warning({msg: names+'不能为空！'});
//         }else if(pattern != null){
//             if(pattern.)
//         }

//     });

// }